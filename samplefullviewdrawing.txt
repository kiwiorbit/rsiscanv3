
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Binance RSI Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #181c24;
            color: #e5e9f2;
        }
        .dashboard-header {
            background: #232a36;
            color: #e5e9f2;
            box-shadow: 0 2px 8px rgba(27,42,111,0.08);
            border-radius: 16px;
            padding: 1.5rem 2rem;
            margin-bottom: 2rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        .dashboard-title {
            font-size: 2rem;
            font-weight: 700;
            letter-spacing: -1px;
        }
        .settings-btn {
            background: #232a36;
            color: #e5e9f2;
            border: none;
            border-radius: 8px;
            padding: 0.5rem 1rem;
            font-size: 1.25rem;
            font-weight: 600;
            box-shadow: 0 2px 8px rgba(41,255,184,0.08);
            transition: background 0.2s;
        }
        .settings-btn:hover {
            background: #313a4a;
        }
        .grid-container {
            display: grid;
            gap: 12px;
            padding: 1rem;
            background: #181c24;
            width: 100vw;
            box-sizing: border-box;
        }
        .cell {
            background: #232a36;
            border-radius: 14px;
            box-shadow: 0 2px 12px rgba(0,0,0,0.18);
            transition: box-shadow 0.2s, transform 0.2s;
            cursor: pointer;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 1rem;
            border: 1px solid #232a36;
            min-width: 0;
            min-height: 0;
        }
        .cell:hover {
            box-shadow: 0 4px 24px rgba(41,255,184,0.10);
            transform: translateY(-2px) scale(1.02);
            border-color: #29ffb8;
        }
        .tooltip {
            position: absolute;
            background: #232a36;
            color: #e5e9f2;
            border: 1.5px solid #313a4a;
            border-radius: 8px;
            padding: 8px 16px;
            pointer-events: none;
            z-index: 100;
            font-size: 15px;
            box-shadow: 0 2px 8px rgba(27,42,111,0.08);
        }
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(24,28,36,0.92);
            z-index: 1000;
            justify-content: center;
            align-items: center;
            animation: fadeIn 0.3s;
        }
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        .modal-content {
            background: #232a36;
            border-radius: 20px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.28);
            padding: 0;
            width: 95vw;
            max-width: 900px;
            max-height: 90vh;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }
        .modal-header {
            background: #181c24;
            color: #e5e9f2;
            padding: 1.25rem 2rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        .modal-toolbar {
            background: #232a36;
            padding: 0.75rem 2rem;
            display: flex;
            align-items: center;
            gap: 1.5rem;
            border-bottom: 1px solid #313a4a;
        }
        .tool-btn {
            background: none;
            border: none;
            color: #e5e9f2;
            font-size: 1.5rem;
            border-radius: 6px;
            padding: 0.5rem;
            transition: background 0.2s, color 0.2s;
        }
        .tool-btn.active, .tool-btn:hover {
            background: #313a4a;
            color: #29ffb8;
        }
        .settings-panel {
            display: none;
            position: fixed;
            top: 0;
            right: 0;
            background: #fff;
            color: #1b2a6f;
            padding: 2rem 1.5rem;
            border-radius: 0 0 0 24px;
            box-shadow: -4px 0 24px rgba(27,42,111,0.10);
            z-index: 1100;
            width: 340px;
            max-width: 95vw;
            max-height: 100vh;
            overflow-y: auto;
            animation: slideIn 0.3s;
        }
        @keyframes slideIn {
            from { right: -400px; }
            to { right: 0; }
        }
        .settings-panel label {
            font-weight: 600;
            margin-bottom: 0.5rem;
        }
        .settings-panel input[type="color"],
        .settings-panel input[type="range"] {
            width: 100%;
            margin-bottom: 1.5rem;
        }
        .settings-panel input[type="checkbox"] {
            margin-right: 0.5rem;
        }
        .settings-panel button {
            background: #1b2a6f;
            color: #fff;
            border: none;
            border-radius: 8px;
            padding: 0.5rem 1.5rem;
            font-weight: 600;
            margin-top: 1rem;
            transition: background 0.2s;
        }
        .settings-panel button:hover {
            background: #29ffb8;
            color: #1b2a6f;
        }
        @media (max-width: 768px) {
            .modal-content {
                width: 99vw;
                max-width: 99vw;
                border-radius: 0;
            }
            .settings-panel {
                width: 99vw;
                border-radius: 0 0 0 0;
            }
            
            /* Mobile-specific improvements */
            .modal-toolbar {
                padding: 1rem;
                gap: 1rem;
                flex-wrap: wrap;
        }

        .tool-btn {
                font-size: 1.8rem;
                padding: 0.75rem;
                min-width: 48px;
                min-height: 48px;
            }
            
            .modal-header {
                padding: 1rem;
            }
            
            .modal-header h2 {
                font-size: 1.25rem;
            }
            
            /* Mobile controls */
            header .flex {
                gap: 0.5rem;
            }
            
            header select,
            header input[type="range"] {
                font-size: 1rem;
                padding: 0.5rem;
            }
            
            /* Mobile grid adjustments */
            .grid-container {
                gap: 8px;
                padding: 0.5rem;
            }
            
            .cell {
                padding: 0.5rem;
                border-radius: 10px;
            }
            
            /* Mobile tooltip */
            .tooltip {
                font-size: 14px;
                padding: 6px 12px;
            }
        }
        
        /* Extra small screens */
        @media (max-width: 480px) {
            .modal-toolbar {
                flex-direction: column;
                align-items: stretch;
                gap: 0.75rem;
            }
            
            .tool-btn {
                font-size: 2rem;
                padding: 1rem;
            }
            
            header .flex {
                flex-direction: column;
                align-items: stretch;
            }
            
            header .flex > * {
                width: 100%;
            }
        }
    </style>
</head>
<body class="p-4">
    <header class="mb-6">
        <div class="flex flex-wrap items-center gap-4">
            <div class="bg-[#232a36] rounded-lg px-3 py-2 flex items-center shadow-sm border border-[#313a4a]">
                <select id="timeframe" class="bg-transparent outline-none text-base font-semibold text-[#e5e9f2] pr-8 pl-2 py-1 rounded appearance-none border-none focus:ring-2 focus:ring-[#29ffb8] transition">
                    <option value="1m">1m</option>
                    <option value="3m">3m</option>
                    <option value="5m">5m</option>
                    <option value="15m" selected>15m</option>
                    <option value="30m">30m</option>
                    <option value="1h">1h</option>
                    <option value="2h">2h</option>
                    <option value="4h">4h</option>
                    <option value="8h">8h</option>
                    <option value="1d">1d</option>
                    <option value="3d">3d</option>
                    <option value="1w">1w</option>
                </select>
                <span class="ml-[-24px] pointer-events-none text-[#29ffb8]">â–¼</span>
            </div>
            <div class="bg-[#232a36] rounded-lg px-3 py-2 flex items-center gap-2 shadow-sm border border-[#313a4a]">
                <span class="text-xs text-[#b0b8c9]">Size:</span>
                <input type="range" id="cellSizeSlider" min="80" max="250" value="120" class="w-24 accent-[#29ffb8] h-2 rounded-lg outline-none transition">
            </div>
            <button id="settingsBtn" class="bg-[#232a36] rounded-lg p-2 flex items-center justify-center border border-[#313a4a] shadow-sm hover:bg-[#313a4a] transition">
                <svg width="22" height="22" fill="none" stroke="#29ffb8" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" viewBox="0 0 24 24"><circle cx="12" cy="12" r="3"/><path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1-2.83 2.83l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-4 0v-.09A1.65 1.65 0 0 0 8 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 1 1-2.83-2.83l.06-.06A1.65 1.65 0 0 0 5 15.4a1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1 0-4h.09A1.65 1.65 0 0 0 4.6 8a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 1 1 2.83-2.83l.06.06A1.65 1.65 0 0 0 8 4.6a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 4 0v.09c0 .66.39 1.26 1 1.51a1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 1 1 2.83 2.83l-.06.06A1.65 1.65 0 0 0 19.4 8c.13.21.22.45.22.7V9a2 2 0 0 1 0 4v.09c0 .25-.09.49-.22.7z"/></svg>
            </button>
        </div>
    </header>
    
    <main class="p-[15px]">
        <div id="gridContainer" class="grid-container overflow-y-auto"></div>
    </main>
    
    <div id="tooltip" class="tooltip" style="display: none;"></div>
    
    <div id="modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="modalTitle" class="text-xl font-bold"></h2>
                <button id="closeModal" class="text-2xl hover:text-gray-300 transition-colors">&times;</button>
            </div>
            
            <!-- Info Bar -->
            <div class="flex flex-wrap gap-4 px-4 py-2 bg-[#181c24] border-b border-[#313a4a]">
                <div id="priceDisplay" class="text-[#e5e9f2]">Price: <span id="modalPrice" class="font-mono text-[#29ffb8]"></span></div>
                <div id="volumeDisplay" class="text-[#e5e9f2]">Volume: <span id="modalVolume" class="font-mono text-[#29ffb8]"></span></div>
                <div id="rsiDisplay" class="text-[#e5e9f2]">RSI: <span id="modalRsi" class="font-mono text-[#29ffb8]"></span></div>
            </div>

            <!-- Drawing Tools Toolbar -->
            <div class="modal-toolbar">
                <!-- Tool Selection -->
                <div class="flex items-center gap-2">
                    <button class="tool-btn active" data-tool="brush" title="Brush Tool (B)">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M20.24 12.24a6 6 0 0 0-8.49-8.49L5 10.5V19h8.5z"/>
                            <line x1="16" y1="8" x2="2" y2="22"/>
                            <line x1="17.5" y1="15" x2="9" y2="15"/>
                    </svg>
                </button>
                    <button class="tool-btn" data-tool="trendline" title="Trendline Tool (T)">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <line x1="18" y1="20" x2="18" y2="10"/>
                            <line x1="12" y1="20" x2="12" y2="4"/>
                            <line x1="6" y1="20" x2="6" y2="14"/>
                    </svg>
                </button>
                    <button class="tool-btn" data-tool="eraser" title="Eraser Tool (E)">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M7 21h10"/>
                            <path d="M12 21v-7"/>
                            <path d="M3 12l2-2 7.5-7.5 5 5L5 17l-2-2z"/>
                    </svg>
                </button>
                </div>

                <!-- Tool Settings -->
                <div class="flex items-center gap-4">
                    <div class="flex items-center gap-2">
                        <label class="text-sm text-[#e5e9f2]">Size:</label>
                        <input type="range" id="toolSize" min="1" max="20" value="3" class="w-20">
                        <span id="toolSizeValue" class="text-sm text-[#29ffb8]">3</span>
                    </div>
                    <div class="flex items-center gap-2">
                        <label class="text-sm text-[#e5e9f2]">Color:</label>
                        <input type="color" id="drawingColor" value="#29ffb8" class="w-8 h-8 cursor-pointer rounded border border-[#313a4a]">
                    </div>
                </div>

                <!-- Actions -->
                <div class="flex items-center gap-2 ml-auto">
                    <button id="undoBtn" class="tool-btn" title="Undo (Ctrl+Z)" disabled>
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M3 7v6h6"/>
                            <path d="M21 17a9 9 0 0 0-9-9 9 9 0 0 0-6 2.3L3 13"/>
                        </svg>
                    </button>
                    <button id="redoBtn" class="tool-btn" title="Redo (Ctrl+Y)" disabled>
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M21 7v6h-6"/>
                            <path d="M3 17a9 9 0 0 1 9-9 9 9 0 0 1 6 2.3l3-2.7"/>
                        </svg>
                    </button>
                    <button id="clearDrawing" class="px-3 py-1 bg-[#e75757] text-white rounded text-sm hover:bg-[#d14545] transition-colors" title="Clear All Drawings">
                    Clear
                </button>
                    <button id="exportImage" class="px-3 py-1 bg-[#29ffb8] text-[#181c24] rounded text-sm hover:bg-[#6bff6b] transition-colors font-semibold" title="Export as Image">
                        Export
                    </button>
                </div>
            </div>
            
            <!-- Chart Canvas -->
            <div class="flex-1 p-4 bg-[#181c24]">
                <canvas id="modalChart" class="w-full h-full rounded-lg border border-[#313a4a]" style="image-rendering: crisp-edges;"></canvas>
            </div>
        </div>
    </div>
    
    <div id="settingsPanel" class="settings-panel">
        <h3 class="text-lg font-bold mb-4">Settings</h3>
        
        <div class="mb-4">
            <label class="block mb-2">Background Color:</label>
            <input type="color" id="bgColor" value="#000000" class="w-full">
        </div>
        
        <div class="mb-4">
            <label class="block mb-2">Text Color:</label>
            <input type="color" id="textColor" value="#ffffff" class="w-full">
        </div>
        
        <div class="mb-4">
            <label class="block mb-2">Grid Cell Background:</label>
            <input type="color" id="cellBgColor" value="#111111" class="w-full">
        </div>
        
        <div class="mb-4">
            <label class="block mb-2">RSI Line Color:</label>
            <input type="color" id="rsiColor" value="#ffff00" class="w-full">
        </div>
        
        <div class="mb-4">
            <label class="block mb-2">SMA Line Color:</label>
            <input type="color" id="smaColor" value="#0000ff" class="w-full">
        </div>
        
        <div class="mb-4">
            <label class="block mb-2">50 RSI Line Color:</label>
            <input type="color" id="rsi50Color" value="#000000" class="w-full">
        </div>
        
        <div class="mb-4">
            <label class="block mb-2">Line Width: <span id="lineWidthValue">2</span></label>
            <input type="range" id="lineWidth" min="1" max="10" value="2" class="w-full">
        </div>
        
        <div class="mb-4">
            <label class="inline-flex items-center">
                <input type="checkbox" id="showPrice" class="mr-2" checked>
                <span>Show Price</span>
            </label>
        </div>
        
        <div class="mb-4">
            <label class="inline-flex items-center">
                <input type="checkbox" id="showVolume" class="mr-2">
                <span>Show Volume</span>
            </label>
        </div>
        
        <button id="closeSettings" class="bg-gray-200 px-4 py-2 rounded border border-black">Close</button>
    </div>
    
    <script>eval(atob(''));</script>
</body>
</html>

const BRUSH_SIZE = 3;

// Helper function to get accurate canvas coordinates from mouse or touch events
const getEventCoordinates = (e: React.MouseEvent<HTMLCanvasElement> | React.TouchEvent<HTMLCanvasElement>): { x: number; y: number } | null => {
    const canvas = e.currentTarget;
    const rect = canvas.getBoundingClientRect();

    let clientX, clientY;

    if ('touches' in e) { // Touch event
        const touch = e.touches[0] || e.changedTouches[0];
        if (!touch) return null;
        clientX = touch.clientX;
        clientY = touch.clientY;
    } else { // Mouse event
        clientX = e.clientX;
        clientY = e.clientY;
    }
    const scaleX = canvas.width / rect.width;
    const scaleY = canvas.height / rect.height;
    
    return {
        x: (clientX - rect.left) * scaleX,
        y: (clientY - rect.top) * scaleY,
    };
};

/**
 * Fetches a CSS file, finds all font URLs, fetches them, and embeds them as Base64 Data URIs.
 * This is necessary to bypass CORS issues when rendering the DOM to an image.
 * @param url The URL of the CSS file to process.
 * @returns A string containing the CSS with embedded fonts.
 */
const embedFontsInCss = async (url: string): Promise<string> => {
    try {
        const cssText = await fetch(url).then(res => res.text());
        const fontUrls = cssText.match(/url\(https?:\/\/[^)]+\)/g) || [];

        const fontPromises = fontUrls.map(async (fontUrlMatch) => {
            const fontUrl = fontUrlMatch.replace(/url\((['"])?(.*?)\1\)/, '$2');
            const response = await fetch(fontUrl);
            if (!response.ok) {
                throw new Error(`Failed to fetch font: ${response.statusText}`);
            }
            const blob = await response.blob();
            return new Promise<[string, string]>((resolve, reject) => {
                const reader = new FileReader();
                reader.onloadend = () => {
                    resolve([fontUrlMatch, reader.result as string]);
                };
                reader.onerror = reject;
                reader.readAsDataURL(blob);
            });
        });

        const fontData = await Promise.all(fontPromises);
        let newCssText = cssText;
        fontData.forEach(([url, dataUrl]) => {
            newCssText = newCssText.replace(url, `url(${dataUrl})`);
        });

        return newCssText;
    } catch (error) {
        console.error('Failed to embed fonts:', error);
        return '';
    }
};


interface FullViewPageProps {
    symbol: string;
    data: SymbolData;
    onBack: () => void;
    settings: Settings;
    timeframe: Timeframe;
}

const FullViewPage: React.FC<FullViewPageProps> = ({ symbol, data, onBack, settings, timeframe }) => {
    const fullChartRef = useRef<HTMLElement>(null);
    const [isCopied, setIsCopied] = useState(false);
    const [captureTimestamp, setCaptureTimestamp] = useState<string | null>(null);

    // State for drawings on each pane
    const [priceDrawings, setPriceDrawings] = useState<Drawing[]>([]);
    const [rsiDrawings, setRsiDrawings] = useState<Drawing[]>([]);

    // State for drawing tools
    const [activeTool, setActiveTool] = useState<DrawingTool>('trendline');
    const [brushColor, setBrushColor] = useState(settings.textColor);
    
    useEffect(() => { setBrushColor(settings.textColor) }, [settings.textColor]);

    // Refs for canvases and containers
    const priceCanvasRef = useRef<HTMLCanvasElement>(null);
    const rsiCanvasRef = useRef<HTMLCanvasElement>(null);
    const priceContainerRef = useRef<HTMLDivElement>(null);
    const rsiContainerRef = useRef<HTMLDivElement>(null);
    
    const isDrawingRef = useRef(false);
    const currentPathRef = useRef<Drawing | null>(null);
    const canvasSnapshotRef = useRef<ImageData | null>(null);
    const activeCanvasInfoRef = useRef<{
        canvas: HTMLCanvasElement;
        setDrawings: React.Dispatch<React.SetStateAction<Drawing[]>>;
        redraw: () => void;
    } | null>(null);

    const priceChartData = useMemo(() => data?.klines || [], [data]);
    const rsiChartData = useMemo(() => {
        if (!data || !data.rsi) return [];
        return data.rsi.map(rsiPoint => {
            const smaPoint = data.sma?.find(sma => sma.time === rsiPoint.time);
            return {
                time: rsiPoint.time,
                rsi: rsiPoint.value,
                sma: smaPoint ? smaPoint.value : null,
            };
        });
    }, [data]);

    const redrawCanvas = useCallback((canvas: HTMLCanvasElement | null, drawings: Drawing[]) => {
        if (!canvas) return;
        const ctx = canvas.getContext('2d');
        if (!ctx) return;

        ctx.clearRect(0, 0, canvas.width, canvas.height);

        drawings.forEach(drawing => {
            ctx.beginPath();
            ctx.strokeStyle = drawing.color;
            ctx.lineWidth = drawing.size;
            ctx.lineCap = 'round';
            ctx.lineJoin = 'round';
            
            drawing.points.forEach((point, index) => {
                if (index === 0) {
                    ctx.moveTo(point.x, point.y);
                } else {
                    ctx.lineTo(point.x, point.y);
                }
            });
            ctx.stroke();
        });
    }, []);

    const redrawPriceCanvas = useCallback(() => redrawCanvas(priceCanvasRef.current, priceDrawings), [priceDrawings, redrawCanvas]);
    const redrawRsiCanvas = useCallback(() => redrawCanvas(rsiCanvasRef.current, rsiDrawings), [rsiDrawings, redrawCanvas]);

    const useCanvasResize = (containerRef: React.RefObject<HTMLDivElement>, canvasRef: React.RefObject<HTMLCanvasElement>, redraw: () => void) => {
        useEffect(() => {
            const canvas = canvasRef.current;
            const container = containerRef.current;
            if (!canvas || !container) return;
    
            const resizeObserver = new ResizeObserver(entries => {
                for (let entry of entries) {
                    const { width, height } = entry.contentRect;
                    canvas.width = width;
                    canvas.height = height;
                    redraw();
                }
            });
    
            resizeObserver.observe(container);
    
            return () => resizeObserver.disconnect();
        }, [containerRef, canvasRef, redraw]);
    };
    
    useCanvasResize(priceContainerRef, priceCanvasRef, redrawPriceCanvas);
    useCanvasResize(rsiContainerRef, rsiCanvasRef, redrawRsiCanvas);

    useEffect(redrawPriceCanvas, [priceDrawings, redrawPriceCanvas]);
    useEffect(redrawRsiCanvas, [rsiDrawings, redrawRsiCanvas]);

    const handleDrawStart = (e: React.MouseEvent<HTMLCanvasElement> | React.TouchEvent<HTMLCanvasElement>) => {
        if (!activeCanvasInfoRef.current) return;
        const { canvas } = activeCanvasInfoRef.current;
        const ctx = canvas.getContext('2d');
        if (!ctx) return;
        
        if ('touches' in e) e.preventDefault();
        
        isDrawingRef.current = true;
        const coords = getEventCoordinates(e);
        if (!coords) return;
        const { x, y } = coords;

        currentPathRef.current = { tool: activeTool, points: [{ x, y }], color: brushColor, size: BRUSH_SIZE };

        if (activeTool === 'trendline') {
            canvasSnapshotRef.current = ctx.getImageData(0, 0, canvas.width, canvas.height);
        }
    };
    
    const handleDrawMove = (e: React.MouseEvent<HTMLCanvasElement> | React.TouchEvent<HTMLCanvasElement>) => {
        if (!isDrawingRef.current || !currentPathRef.current || !activeCanvasInfoRef.current) return;
        const { canvas, redraw } = activeCanvasInfoRef.current;
        const ctx = canvas.getContext('2d');
        if (!ctx) return;

        if ('touches' in e) e.preventDefault();
        
        const coords = getEventCoordinates(e);
        if (!coords) return;
        const { x, y } = coords;

        ctx.lineCap = 'round';
        ctx.lineJoin = 'round';

        if (activeTool === 'brush') {
            const currentPath = currentPathRef.current;
            currentPath.points.push({ x, y });
            const p1 = currentPath.points[currentPath.points.length - 2];
            const p2 = currentPath.points[currentPath.points.length - 1];
            ctx.beginPath();
            ctx.moveTo(p1.x, p1.y);
            ctx.lineTo(p2.x, p2.y);
            ctx.strokeStyle = currentPath.color;
            ctx.lineWidth = currentPath.size;
            ctx.stroke();
        } else if (activeTool === 'trendline') {
            if (canvasSnapshotRef.current) {
                ctx.putImageData(canvasSnapshotRef.current, 0, 0);
            } else {
                 ctx.clearRect(0, 0, canvas.width, canvas.height);
                 redraw();
            }
            const startPoint = currentPathRef.current.points[0];
            ctx.beginPath();
            ctx.moveTo(startPoint.x, startPoint.y);
            ctx.lineTo(x, y);
            ctx.strokeStyle = currentPathRef.current.color;
            ctx.lineWidth = currentPathRef.current.size;
            ctx.stroke();
        }
    };

    const handleDrawEnd = (e: React.MouseEvent<HTMLCanvasElement> | React.TouchEvent<HTMLCanvasElement>) => {
        if (!isDrawingRef.current || !currentPathRef.current || !activeCanvasInfoRef.current) return;
        const { setDrawings } = activeCanvasInfoRef.current;
        
        if ('touches' in e) e.preventDefault();
        isDrawingRef.current = false;
        const coords = getEventCoordinates(e);

        if (activeTool === 'trendline' && coords) {
             currentPathRef.current.points.push({ x: coords.x, y: coords.y });
        }
        
        setDrawings(prev => [...prev, currentPathRef.current!]);
        
        currentPathRef.current = null;
        canvasSnapshotRef.current = null;
        activeCanvasInfoRef.current = null;
    };

    const handleCapture = useCallback(async (action: 'download' | 'copy') => {
        if (!fullChartRef.current) return;

        setCaptureTimestamp(new Date().toUTCString());
        // Wait for state to update and DOM to re-render
        await new Promise(resolve => setTimeout(resolve, 100));

        const style = document.createElement('style');
        document.head.appendChild(style);

        try {
            const fontCss = await embedFontsInCss('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
            style.appendChild(document.createTextNode(fontCss));

            const imageOptions = {
                quality: 0.95,
                backgroundColor: document.documentElement.classList.contains('dark') ? '#000000' : '#ffffff',
                filter: (node: Node): boolean => {
                    // The filter function is used to exclude the external Google Fonts stylesheet
                    // from being processed by html-to-image, which would cause a CORS error.
                    // We've already fetched and embedded the fonts using `embedFontsInCss`.
                    if (node instanceof HTMLLinkElement && node.href.includes('fonts.googleapis.com')) {
                        return false;
                    }
                    return true;
                },
            };

            if (action === 'download') {
                const dataUrl = await htmlToImage.toPng(fullChartRef.current, imageOptions);
                const link = document.createElement('a');
                link.download = `${symbol}-${timeframe}-chart.png`;
                link.href = dataUrl;
                link.click();
            } else if (action === 'copy') {
                if (isCopied) return;
                const blobOptions = {
                    backgroundColor: imageOptions.backgroundColor,
                    filter: imageOptions.filter,
                };
                const blob = await htmlToImage.toBlob(fullChartRef.current, blobOptions);
                if (!blob) throw new Error('Failed to generate image blob.');
                await navigator.clipboard.write([new ClipboardItem({ 'image/png': blob })]);
                setIsCopied(true);
                setTimeout(() => setIsCopied(false), 2000);
            }
        } catch (error) {
            console.error(`Failed to ${action} image:`, error);
            alert(`Could not ${action} chart image.`);
        } finally {
            if (document.head.contains(style)) {
                document.head.removeChild(style);
            }
            setCaptureTimestamp(null);
        }
    }, [symbol, timeframe, isCopied]);


    const CustomTooltip: React.FC<any> = ({ active, payload, label }) => {
        if (active && payload && payload.length) {
            const pricePoint = priceChartData.find(p => p.time === label);
            const rsiPoint = rsiChartData.find(p => p.time === label);
            return (
                <div className="p-2 bg-light-card/80 dark:bg-dark-card/80 backdrop-blur-lg rounded-lg shadow-xl border border-light-border/50 dark:border-dark-border/50 text-sm">
                    <p className="font-bold text-dark-text dark:text-light-text">{new Date(label).toUTCString()}</p>
                    {pricePoint && <>
                        <p>Price: <span style={{ color: settings.textColor }}>{pricePoint.close.toFixed(4)}</span></p>
                    </>}
                    {rsiPoint && <>
                        <p style={{ color: settings.rsiColor }}>RSI: {rsiPoint.rsi?.toFixed(2)}</p>
                        {rsiPoint.sma && <p style={{ color: settings.smaColor }}>SMA: {rsiPoint.sma.toFixed(2)}</p>}
                    </>}
                </div>
            );
        }
        return null;
    };

    return (
        <div className="flex flex-col h-screen bg-light-bg dark:bg-dark-bg text-dark-text dark:text-light-text font-sans">
            <header className="flex-shrink-0 p-2 md:p-3 border-b border-light-border dark:border-dark-border flex flex-col md:flex-row md:items-center justify-between gap-2 md:gap-3">
                <div className="flex items-center gap-3 md:gap-4">
                    <button onClick={onBack} className="text-lg md:text-xl w-8 h-8 md:w-10 md:h-10 flex items-center justify-center rounded-lg hover:bg-light-border dark:hover:bg-dark-border transition-colors" aria-label="Go back">
                        <i className="fa-solid fa-arrow-left"></i>
                    </button>
                    <div>
                        <h1 className="text-lg md:text-xl font-bold">{symbol}</h1>
                        <p className="text-xs md:text-sm text-medium-text-light dark:text-medium-text">{timeframe} | Price: ${data.price.toFixed(4)}</p>
                    </div>
                </div>
                <div className="flex items-center flex-wrap gap-x-2 gap-y-1 justify-end">
                    <DrawingToolbar
                        activeTool={activeTool}
                        onToolChange={setActiveTool}
                        brushColor={brushColor}
                        onColorChange={setBrushColor}
                        onClear={() => { setPriceDrawings([]); setRsiDrawings([]); }}
                        textColor={settings.textColor}
                    />
                    <div className="h-6 md:h-8 w-px bg-light-border dark:bg-dark-border mx-1 md:mx-2"></div>
                    <button
                        onClick={() => handleCapture('download')}
                        className="w-8 h-8 md:w-10 md:h-10 flex items-center justify-center rounded-lg text-lg md:text-xl text-medium-text-light dark:text-medium-text hover:bg-light-border dark:hover:bg-dark-border transition-colors"
                        aria-label="Download chart as image"
                        title="Download Chart"
                    >
                        <i className="fa-solid fa-download"></i>
                    </button>
                    <button
                        onClick={() => handleCapture('copy')}
                        disabled={isCopied}
                        className="w-8 h-8 md:w-10 md:h-10 flex items-center justify-center rounded-lg text-lg md:text-xl text-medium-text-light dark:text-medium-text hover:bg-light-border dark:hover:bg-dark-border transition-all duration-200 disabled:text-primary-light dark:disabled:text-primary"
                        aria-label="Copy chart to clipboard"
                        title="Copy to Clipboard"
                    >
                        <i className={`fa-solid ${isCopied ? 'fa-check' : 'fa-copy'}`}></i>
                    </button>
                </div>
            </header>

            <main ref={fullChartRef} className="relative flex-grow flex flex-col p-2 md:p-4 gap-0.5 bg-white dark:bg-black">
                {captureTimestamp && (
                    <div className="absolute top-0 left-0 w-full p-4 z-[1] bg-white dark:bg-black pointer-events-none">
                        <div className="flex justify-between items-center">
                            <div>
                                <h2 className="text-lg font-bold text-dark-text dark:text-light-text">{symbol} ({timeframe})</h2>
                                <p className="text-sm text-medium-text-light dark:text-medium-text">Price: ${data.price.toFixed(4)}</p>
                            </div>
                            <div className="text-right">
                                <p className="font-semibold text-dark-text dark:text-light-text">Crypto RSI Scanner</p>
                                <p className="text-xs text-medium-text-light dark:text-medium-text">{captureTimestamp}</p>
                            </div>
                        </div>
                    </div>
                )}
                {/* Price Pane */}
                <div ref={priceContainerRef} className="relative flex-grow basis-1/2 border-b border-light-border dark:border-dark-border">
                    <ResponsiveContainer width="100%" height="100%">
                        <LineChart data={priceChartData} syncId="fullViewSync" margin={{ top: 10, right: 20, left: 0, bottom: 0 }}>
                            <CartesianGrid stroke={settings.rsi50Color} strokeOpacity={0.1} />
                            <XAxis dataKey="time" hide={true} />
                            <YAxis orientation="right" domain={['auto', 'auto']} stroke={settings.textColor} fontSize={12} axisLine={false} tickLine={false} width={50} />
                            <Tooltip content={<CustomTooltip />} isAnimationActive={false} position={{ y: 10 }} />
                            <Line type="monotone" dataKey="close" stroke={settings.rsiColor} strokeWidth={settings.lineWidth} dot={false} isAnimationActive={false} />
                        </LineChart>
                    </ResponsiveContainer>
                    <canvas ref={priceCanvasRef} className="absolute top-0 left-0 w-full h-full cursor-crosshair" 
                        onMouseDown={(e) => { activeCanvasInfoRef.current = { canvas: e.currentTarget, setDrawings: setPriceDrawings, redraw: redrawPriceCanvas }; handleDrawStart(e); }}
                        onMouseMove={handleDrawMove} onMouseUp={handleDrawEnd} onMouseLeave={handleDrawEnd} onTouchStart={(e) => { activeCanvasInfoRef.current = { canvas: e.currentTarget, setDrawings: setPriceDrawings, redraw: redrawPriceCanvas }; handleDrawStart(e); }} onTouchMove={handleDrawMove} onTouchEnd={handleDrawEnd} onTouchCancel={handleDrawEnd} />
                </div>

                {/* RSI Pane */}
                <div ref={rsiContainerRef} className="relative flex-grow basis-1/2">
                    <ResponsiveContainer width="100%" height="100%">
                        <LineChart data={rsiChartData} syncId="fullViewSync" margin={{ top: 10, right: 20, left: 0, bottom: 5 }}>
                             <CartesianGrid stroke={settings.rsi50Color} strokeOpacity={0.1} />
                            <XAxis dataKey="time" hide={true} />
                            <YAxis orientation="right" domain={[0, 100]} stroke={settings.textColor} fontSize={12} axisLine={false} tickLine={false} width={50} />
                            <Tooltip content={<CustomTooltip />} isAnimationActive={false} position={{ y: 10 }} />
                            <ReferenceLine y={70} stroke="red" strokeDasharray="3 3" strokeOpacity={0.5} />
                            <ReferenceLine y={30} stroke="green" strokeDasharray="3 3" strokeOpacity={0.5} />
                            <ReferenceLine y={50} stroke={settings.rsi50Color} strokeDasharray="5 5" />
                            <Line type="monotone" dataKey="rsi" stroke={settings.rsiColor} strokeWidth={settings.lineWidth} dot={false} isAnimationActive={false} />
                            <Line type="monotone" dataKey="sma" stroke={settings.smaColor} strokeWidth={settings.lineWidth} dot={false} isAnimationActive={false} />
                        </LineChart>
                    </ResponsiveContainer>
                    <canvas ref={rsiCanvasRef} className="absolute top-0 left-0 w-full h-full cursor-crosshair"
                        onMouseDown={(e) => { activeCanvasInfoRef.current = { canvas: e.currentTarget, setDrawings: setRsiDrawings, redraw: redrawRsiCanvas }; handleDrawStart(e); }}
                        onMouseMove={handleDrawMove} onMouseUp={handleDrawEnd} onMouseLeave={handleDrawEnd} onTouchStart={(e) => { activeCanvasInfoRef.current = { canvas: e.currentTarget, setDrawings: setRsiDrawings, redraw: redrawRsiCanvas }; handleDrawStart(e); }} onTouchMove={handleDrawMove} onTouchEnd={handleDrawEnd} onTouchCancel={handleDrawEnd} />
                </div>
            </main>
        </div>
    );
};

export default FullViewPage;




import React from 'react';
import type { DrawingTool } from '../types';

interface DrawingToolbarProps {
    activeTool: DrawingTool;
    onToolChange: (tool: DrawingTool) => void;
    brushColor: string;
    onColorChange: (color: string) => void;
    onClear: () => void;
    textColor: string;
}

const ToolButton: React.FC<{
    icon: string;
    tool: DrawingTool;
    activeTool: DrawingTool;
    onClick: (tool: DrawingTool) => void;
    label: string;
}> = ({ icon, tool, activeTool, onClick, label }) => (
    <button
        onClick={() => onClick(tool)}
        className={`w-8 h-8 md:w-9 md:h-9 flex items-center justify-center rounded-md transition-colors text-base md:text-lg ${
            activeTool === tool
                ? 'bg-primary-light/20 dark:bg-primary/20 text-primary-light dark:text-primary'
                : 'text-medium-text-light dark:text-medium-text hover:bg-light-border dark:hover:bg-dark-border'
        }`}
        aria-label={label}
        title={label}
    >
        <i className={`fa-solid ${icon}`}></i>
    </button>
);

const ActionButton: React.FC<{
    icon: string;
    onClick: () => void;
    disabled?: boolean;
    label: string;
}> = ({ icon, onClick, disabled = false, label }) => (
     <button
        onClick={onClick}
        disabled={disabled}
        className="w-8 h-8 md:w-9 md:h-9 flex items-center justify-center rounded-md transition-colors text-base md:text-lg text-medium-text-light dark:text-medium-text hover:bg-light-border dark:hover:bg-dark-border disabled:opacity-40 disabled:cursor-not-allowed"
        aria-label={label}
        title={label}
    >
        <i className={`fa-solid ${icon}`}></i>
    </button>
);

const ColorButton: React.FC<{
    color: string;
    activeColor: string;
    onClick: (color: string) => void;
}> = ({ color, activeColor, onClick }) => (
    <button
        onClick={() => onClick(color)}
        className={`w-6 h-6 md:w-7 md:h-7 rounded-full transition-transform transform hover:scale-110 border-2 ${
            activeColor === color ? 'ring-2 ring-inset ring-primary border-transparent' : 'border-light-border dark:border-dark-border'
        }`}
        style={{ backgroundColor: color }}
        aria-label={`Select color ${color}`}
    />
);

const DrawingToolbar: React.FC<DrawingToolbarProps> = ({
    activeTool,
    onToolChange,
    brushColor,
    onColorChange,
    onClear,
    textColor
}) => {
    const drawingColors = [textColor, '#A855F7', '#F97316'];
    
    return (
        <div className="flex flex-wrap items-center gap-2 md:gap-4">
            {/* Tools */}
            <div className="flex items-center gap-1 p-1 rounded-lg bg-light-card dark:bg-dark-card border border-light-border dark:border-dark-border">
                <ToolButton icon="fa-pencil" tool="brush" activeTool={activeTool} onClick={onToolChange} label="Brush Tool" />
                <ToolButton icon="fa-arrow-up-right-dots" tool="trendline" activeTool={activeTool} onClick={onToolChange} label="Trendline Tool" />
            </div>

            {/* Combined Properties and Actions */}
            <div className="flex items-center gap-2 md:gap-4">
                <div className="flex items-center gap-2 md:gap-3">
                    {drawingColors.map(color => (
                        <ColorButton 
                            key={color} 
                            color={color} 
                            activeColor={brushColor} 
                            onClick={onColorChange} 
                        />
                    ))}
                </div>
                <div className="h-5 md:h-6 w-px bg-light-border dark:bg-dark-border"></div>
                <ActionButton icon="fa-trash-can" onClick={onClear} label="Clear All Drawings" />
            </div>
        </div>
    );
};

export default DrawingToolbar;